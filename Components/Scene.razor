@inject IJSRuntime JS

<CascadingValue Value="this" IsFixed>
    @ChildContent
</CascadingValue>

@code {
    private static uint IdCounter = 0;
    public uint Id = 0;

    public IJSObjectReference ObjRef { get; set; } = null!;

    public Camera? Camera;

    [CascadingParameter]
    private Renderer renderer { get; set; } = null!;

    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (renderer is null)
        {
            throw new ArgumentNullException(nameof(renderer), "Scene must be child of Renderer");
        }

        Id = Interlocked.Increment(ref IdCounter);
        ObjRef = await JS.InvokeAsync<IJSObjectReference>("CreateScene", Id);
        renderer.AddScene(this);
    }

    internal async Task SetCamera(Camera c)
    {
        this.Camera = c;

        if (renderer.RendererCreated)
        {
            await renderer.RenderSceneAsync(ObjRef, c.ObjRef);
            return;
        }

        renderer.OnRendererReady += OnRendererReady;
    }

    private void OnRendererReady(object? sender, EventArgs args)
    {
        _ = renderer.RenderSceneAsync(ObjRef, Camera!.ObjRef);
        renderer.OnRendererReady -= OnRendererReady;
    }

    internal async Task AddObject(IJSObjectReference obj)
    {
        await ObjRef.InvokeVoidAsync("Add", obj);
    }

    public async Task Render()
    {
        if (Camera is null)
        {
            throw new ArgumentNullException(nameof(Camera));
        }

        if (!renderer.RendererCreated)
        {
            Console.WriteLine("Trying to render when renderer has not yet been created");
            return;
        }

        await renderer.RenderSceneAsync(ObjRef, Camera.ObjRef);
    }
}