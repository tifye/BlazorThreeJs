@implements IMaterialApplicable

@inject IJSRuntime JS

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {
    private static uint IdCounter = 0;

    private IJSObjectReference? meshRef { get; set; }

    public IJSObjectReference ObjRef => meshRef!;

    public uint Id = 0;

    [CascadingParameter]
    private Scene scene { get; set; } = null!;

    public IGeomtry? Geometry { get; set; }

    public IMaterial? Material { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;

    [Parameter]
    public bool CastShadow { get; set; } = false;

    [Parameter]
    public float X { get; set; }

    [Parameter]
    public float Y { get; set; }

    [Parameter]
    public float Z { get; set; }

    [Parameter]
    public float RotationX { get; set; }

    [Parameter]
    public float RotationY { get; set; }

    [Parameter]
    public float RotationZ { get; set; }


    protected override void OnInitialized()
    {
        if (scene is null)
        {
            throw new ArgumentNullException(nameof(scene), "mesh must exist within a scene");
        }

        Id = Interlocked.Increment(ref IdCounter);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (meshRef is not null)
        {
            await meshRef.InvokeVoidAsync("SetPosition", X, Y, Z);
            await meshRef.InvokeVoidAsync("SetRotation", RotationX, RotationY, RotationZ);
        }
    }
    internal async Task SetGeometry(IGeomtry geo)
    {
        Geometry = geo;
        await CreateMesh();
    }

    public async Task SetMaterial(IMaterial mat)
    {
        Material = mat;
        await CreateMesh();
    }

    private async Task CreateMesh()
    {
        if (Geometry is null || Material is null) return;
        meshRef = await JS.InvokeAsync<IJSObjectReference>("CreateMesh", Id, Geometry.Id, Material.Id, CastShadow);
        await meshRef.InvokeVoidAsync("SetPosition", X, Y, Z);
        Console.WriteLine("addming mesh to scene");
        await scene.AddObject(ObjRef);
        await scene.Render();
    }

    public async Task SetPosition(float x, float y, float z)
    {
        X = x;
        Y = y;
        Z = z;
        await meshRef!.InvokeVoidAsync("SetPosition", X, Y, Z);
    }

    public async Task SetRotation(float x, float y, float z)
    {
        RotationX = x;
        RotationY = y;
        RotationZ = z;
        await meshRef!.InvokeVoidAsync("SetRotation", x, y, z);
    }

    public interface IGeomtry
    {
        public uint Id { get; }
    }
}