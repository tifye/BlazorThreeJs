@using System.Drawing
@inject IJSRuntime JS

<CascadingValue Value="this" IsFixed>
    @if (ChildContent is not null)
    {
        @ChildContent
    }
</CascadingValue>

@code {
    public IJSObjectReference ObjRef { get; private set; } = null!;

    [CascadingParameter]
    private Scene scene { get; set; } = null!;

    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    [Parameter]
    public bool CastShadow { get; set; }

    [Parameter]
    public Color Color { get; set; } = Color.WhiteSmoke;

    [Parameter]
    public float Intesity { get; set; } = 1;

    [Parameter]
    public float Distance { get; set; } = 0;

    [Parameter]
    public float Angle { get; set; } = 0;

    [Parameter]
    public float Penumbra { get; set; } = 0;

    [Parameter]
    public float Decay { get; set; } = 2;

    [Parameter]
    public float X { get; set; } = 0;

    [Parameter]
    public float Y { get; set; } = 0;

    [Parameter]
    public float Z { get; set; } = 0;

    [Parameter]
    public float RotateX { get; set; } = 0;

    [Parameter]
    public float RotateY { get; set; } = 0;

    [Parameter]
    public float RotateZ { get; set; } = 0;

    public Action<IJSObjectReference>? OnObjCreated;

    protected override async Task OnInitializedAsync()
    {
        if (scene is null)
        {
            throw new ArgumentNullException(nameof(scene), "PointLight must exist within a scene");
        }

        Console.WriteLine("SpotLight");
        ObjRef = await JS.InvokeAsync<IJSObjectReference>("CreateSpotLight", $"#{Color.R:X2}{Color.G:X2}{Color.B:X2}",
        Intesity, Distance, Angle, Penumbra, Decay, CastShadow);

        await ObjRef.InvokeVoidAsync("SetPosition", X, Y, Z);
        await ObjRef.InvokeVoidAsync("SetRotation", RotateX, RotateY, RotateZ);
        OnObjCreated?.Invoke(ObjRef);
        OnObjCreated = null;

        await scene.AddObject(ObjRef);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ObjRef is not null)
        {
            await ObjRef.InvokeVoidAsync("SetPosition", X, Y, Z);
            await ObjRef.InvokeVoidAsync("SetRotation", RotateX, RotateY, RotateZ);
        }
    }

    public async Task SetPosition(float x, float y, float z)
    {
        X = x;
        Y = y;
        Z = z;
        await ObjRef!.InvokeVoidAsync("SetPosition", X, Y, Z);
    }

    public void SetPositionSync(float x, float y, float z)
    {
        X = x;
        Y = y;
        Z = z;
        ObjRef!.InvokeVoidAsync("SetPosition", X, Y, Z);
    }

    public async Task SetRotation(float x, float y, float z)
    {
        RotateX = x;
        RotateY = y;
        RotateZ = z;
        await ObjRef!.InvokeVoidAsync("SetRotation", x, y, z);
    }
}