@inject IJSRuntime JS

<canvas @ref="canvas" width="@Width" height="@Height" class="!size-[100%]">
    <CascadingValue Value="this" IsFixed>
        @ChildContent
    </CascadingValue>
</canvas>

@code {
    private List<Scene> scenes = new();
    private Scene? activeScene;

    public bool RendererCreated = false;

    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    [Parameter, EditorRequired]
    public int Width { get; set; } = 300;

    [Parameter, EditorRequired]
    public int Height { get; set; } = 150;

    private ElementReference canvas { get; set; }

    public IJSObjectReference ObjRef { get; set; } = null!;

    public EventHandler? OnRendererReady;

    internal void AddScene(Scene scene)
    {
        scenes.Add(scene);
        if (scenes.Count == 1)
        {
            activeScene = scene;
        }
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (!first || RendererCreated) return;
        ObjRef = await JS.InvokeAsync<IJSObjectReference>("CreateRenderer", canvas);
        RendererCreated = true;
        OnRendererReady?.Invoke(this, EventArgs.Empty);
    }

    internal async Task RenderSceneAsync(IJSObjectReference scene, IJSObjectReference camera)
    {
        await ObjRef.InvokeVoidAsync("RenderScene", scene, camera);
    }
}