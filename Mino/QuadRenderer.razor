@using BlazorThreeJs.Components
@using System.Drawing;

@inject IJSRuntime JS

<div class="grid grid-cols-2 gap-4 w-full h-full">
    <div class="size-[100%]">
        <Renderer Width="500" Height="500">
            <Scene>
                <Camera Z="4" Context="Cam">
                    <OrbitControls Camera="Cam" />
                </Camera>
                <HemisphereLight SkyColor="Color.Blue" GroundColor="Color.Green" Intesity="10" />
                <DirectionalLight Color="Color.YellowGreen" Y="1" X="2" RotateX="180" Intesity="2" />

                <Mesh @ref="mesh1" CastShadow="true">
                    <BoxGeometry Width="1" Height="1" Depth="1" />
                    <MeshPhongMaterial Color="Color.White" />
                </Mesh>
                <Mesh CastShadow="true">
                    <SphereGeometry Radius="0.5f" WidthSegments="32" HeightSegments="16" />
                    <MeshPhongMaterial Color="Color.IndianRed" />
                </Mesh>
            </Scene>
        </Renderer>
    </div>
    <div class="size-[100%]">
        <Renderer Width="500" Height="500">
            <Scene>
                <Camera Z="4" Context="Cam">
                    <OrbitControls Camera="Cam" />
                </Camera>
                <HemisphereLight SkyColor="Color.Crimson" GroundColor="Color.Green" Intesity="5" />
                <DirectionalLight Color="Color.YellowGreen" Y="1" X="2" RotateX="180" Intesity="2" />

                <Mesh @ref="mesh2" CastShadow="true">
                    <BoxGeometry Width="1" Height="1" Depth="1" />
                    <MeshPhongMaterial Color="Color.White" />
                </Mesh>
            </Scene>
        </Renderer>
    </div>
    <div class="size-[100%]">
        <Renderer Width="500" Height="500">
            <Scene>
                <Camera Z="4" Context="Cam">
                    <OrbitControls Camera="Cam" />
                </Camera>
                <HemisphereLight SkyColor="Color.Pink" GroundColor="Color.Green" Intesity="3" />
                <DirectionalLight Color="Color.YellowGreen" Y="1" X="2" RotateX="180" Intesity="2" />

                <Mesh @ref="mesh3" CastShadow="true">
                    <BoxGeometry Width="1" Height="1" Depth="1" />
                    <MeshPhongMaterial Color="Color.White" />
                </Mesh>
            </Scene>
        </Renderer>
    </div>
    <div class="size-[100%]">
        <Renderer Width="500" Height="500">
            <Scene>
                <Camera Z="4" Context="Cam">
                    <OrbitControls Camera="Cam" />
                </Camera>
                <HemisphereLight SkyColor="Color.Pink" GroundColor="Color.Green" Intesity="3" />
                <DirectionalLight Color="Color.YellowGreen" Y="1" X="2" RotateX="180" Intesity="2" />

                <Mesh @ref="mesh4" CastShadow="true">
                    <BoxGeometry Width="1" Height="1" Depth="1" />
                    <MeshPhongMaterial Color="Color.White" />
                </Mesh>
            </Scene>
        </Renderer>
    </div>
</div>


@code {
    private DotNetObjectReference<QuadRenderer> objRef = null!;

    private DateTime firstTick = DateTime.Now;

    private Mesh mesh1 { get; set; } = null!;
    private Mesh mesh2 { get; set; } = null!;
    private Mesh mesh3 { get; set; } = null!;
    private Mesh mesh4 { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        objRef = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("RegisterOnAnimationFrame", objRef);
    }

    [JSInvokable]
    public async Task OnAnimationFrame(double delta)
    {
        TimeSpan eslaped = DateTime.Now - firstTick;
        float x = MathF.Cos((float)eslaped.TotalSeconds) * MathF.PI;
        float z = MathF.Sin((float)eslaped.TotalSeconds) * MathF.PI;
        await mesh1.SetRotation(x, 0, z);
        await mesh2.SetRotation(x + 10, 0, z);
        await mesh3.SetRotation(x + 20, 0, z);
        await mesh4.SetRotation(x + 30, 0, z);
    }
}
